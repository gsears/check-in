{# A custom template for rendering the xy_coordinates form widget #}
{% block xy_coordinates_widget %}

	{# Render hidden fields #}
	{% for child in form.children|filter(child => not child.rendered) %}
		{{ form_widget(child) }}
	{% endfor %}

	{# Variable with widget ID #}
	{% set widgetId = id ~ '_xywidget' %}

	{# Dom element for JS Component #}
	<div id="{{widgetId}}">
		Loading...
	</div>

	<script>
	{% set jsonFieldLabel = constant('App\\Form\\Type\\AbstractXYComponentType::JSON_FIELD') %}
	{% set jsonElement = form[jsonFieldLabel].vars.id %}

	// Waits until js and everything else is ready and loads an instance of the XY selector.
	addLoadEvent(() => {
		const jsonField = {{jsonElement}};

		XYQuestionWidgetFactory('#{{ widgetId }}', {
			// Set mode to 'point', i.e. only one sell can be selected
			mode: 'point',
			points: {
				// If data is provided in a form option, populate it here. Otherwise it is bound to the json field.
				// Note: this data is a 'point'
				data:{% if initial_data %}{{ initial_data|raw }}{% else %}JSON.parse(jsonField.value){% endif %},
				onChange: (points) => { jsonField.value = JSON.stringify(points); }
			},
			xLabelHigh: '{{ x_label_high }}',
			xLabelLow: '{{ x_label_low }}',
			yLabelHigh: '{{ y_label_high }}',
			yLabelLow: '{{ y_label_low }}',
			cellSizeInRem: {{ cell_size }}
		});
	});
	</script>
{% endblock %}

{# A custom template for rendering the xy_danger_zones form widget #}
{% block xy_danger_zones_widget %}

	{# Variable with widget ID #}
	{% set widgetId = id ~ '_xywidget' %}

	{# Render hidden fields #}
	{% for child in form.children|filter(child => not child.rendered) %}
		{{ form_widget(child) }}
	{% endfor %}

	{# Dom element for JS Component #}
	<div id="{{widgetId}}">
		Loading...
	</div>

	<script>
	{% set jsonFieldLabel = constant('App\\Form\\Type\\AbstractXYComponentType::JSON_FIELD') %}
	{% set jsonElement = form[jsonFieldLabel].vars.id %}

	// Waits until js and everything else is ready and loads an instance of the XY selector.
	addLoadEvent(() => {
		const jsonField = {{jsonElement}};

		XYQuestionWidgetFactory('#{{ widgetId }}', {
			// Set mode to 'region' / 'readonly-danger' so cell ranges can be set with risk weights
			mode:{% if read_only %}'readonly-danger'{% else %}'region'{% endif %},
			points: {
				// Get the coordinates option to populate with pre-existing class data
				data: {{ coordinates | raw }}
			},
			regions: {
				// If data is provided in a form option, populate it here. Otherwise it is bound to the json field.
				// Note: this data is an array of region objects
				data:{% if initial_data %}{{ initial_data|raw }}{% else %}JSON.parse(jsonField.value){% endif %},
				onChange: (regions) => {
					jsonField.value = JSON.stringify(regions);
				}
			},
			xLabelHigh: '{{ x_label_high }}',
			xLabelLow: '{{ x_label_low }}',
			yLabelHigh: '{{ y_label_high }}',
			yLabelLow: '{{ y_label_low }}',
			cellSizeInRem: {{ cell_size }}
		});
	});
	</script>
{% endblock %}

{# A custom template for adding a nudge UI meter to encourage fuller responses #}
{% block sentiment_text_row %}

	{{form_label(form)}}
	{{form_help(form)}}

	<div class="form-group container px-0"> 
		<div class="row">
			{# Render the textarea widget #}
			<div class="col-11 h-100">{{form_widget(form)}}</div>
			{# Then put the nudge ui next to it #}
			<div class="col-1 text-right">
				<div class="progress progress-bar-vertical">
					<div id="progress-bar" class="progress-bar" role="progressbar"style="height: 0%;"></div>
				</div>
			</div>
		</div>
	</div>

	<script>
	addLoadEvent(() => { 
		const progressBar = document.getElementById('progress-bar');
		// Get the textarea input from the form
		const textInput = {{ form.vars.id }};
		// Get target character count from form options
		const characterCount = {{ targetCharacterCount }};
		const classLists = ['bg-success', 'bg-warning', 'bg-danger'];

		textInput.oninput = () => {
			// Reset all background classes
			classLists.forEach((c) => {
				progressBar.classList.remove(c)
			});

			// Calculate percentage of target characters input
			const progressPercentage = (textInput.value.length / characterCount) * 100;

			// Set colour code
			if (progressPercentage < 30) {
				progressBar.classList.add('bg-danger');
			} else if (progressPercentage < 80) {
				progressBar.classList.add('bg-warning');
			} else {
				progressBar.classList.add('bg-success');
			}
		// Set height of the vertical progress bar
		progressBar.style.height = `${progressPercentage}%`;
		}
	});
	</script>

{% endblock %}
